type Query {
  bewertungKleinerKreis(filter: bewertungKleinerKreis_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [bewertungKleinerKreis!]!
  bewertungKleinerKreis_by_id(id: ID!, version: String): bewertungKleinerKreis
  bewertungKleinerKreis_aggregated(groupBy: [String], filter: bewertungKleinerKreis_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [bewertungKleinerKreis_aggregated!]!
  bewertungKleinerKreis_by_version(version: String!, id: ID!): version_bewertungKleinerKreis
  arbeitskreis(filter: arbeitskreis_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [arbeitskreis!]!
  arbeitskreis_by_id(id: ID!, version: String): arbeitskreis
  arbeitskreis_aggregated(groupBy: [String], filter: arbeitskreis_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [arbeitskreis_aggregated!]!
  arbeitskreis_by_version(version: String!, id: ID!): version_arbeitskreis
  melodie_files(filter: melodie_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [melodie_files!]!
  melodie_files_by_id(id: ID!, version: String): melodie_files
  melodie_files_aggregated(groupBy: [String], filter: melodie_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [melodie_files_aggregated!]!
  melodie_files_by_version(version: String!, id: ID!): version_melodie_files
  gesangbuchlied_kategorie(filter: gesangbuchlied_kategorie_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [gesangbuchlied_kategorie!]!
  gesangbuchlied_kategorie_by_id(id: ID!, version: String): gesangbuchlied_kategorie
  gesangbuchlied_kategorie_aggregated(groupBy: [String], filter: gesangbuchlied_kategorie_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [gesangbuchlied_kategorie_aggregated!]!
  gesangbuchlied_kategorie_by_version(version: String!, id: ID!): version_gesangbuchlied_kategorie
  lizenz(filter: lizenz_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [lizenz!]!
  lizenz_by_id(id: ID!, version: String): lizenz
  lizenz_aggregated(groupBy: [String], filter: lizenz_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [lizenz_aggregated!]!
  lizenz_by_version(version: String!, id: ID!): version_lizenz
  text_autor(filter: text_autor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [text_autor!]!
  text_autor_by_id(id: ID!, version: String): text_autor
  text_autor_aggregated(groupBy: [String], filter: text_autor_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [text_autor_aggregated!]!
  text_autor_by_version(version: String!, id: ID!): version_text_autor
  text(filter: text_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [text!]!
  text_by_id(id: ID!, version: String): text
  text_aggregated(groupBy: [String], filter: text_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [text_aggregated!]!
  text_by_version(version: String!, id: ID!): version_text
  gesangbuchlied(filter: gesangbuchlied_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [gesangbuchlied!]!
  gesangbuchlied_by_id(id: ID!, version: String): gesangbuchlied
  gesangbuchlied_aggregated(groupBy: [String], filter: gesangbuchlied_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [gesangbuchlied_aggregated!]!
  gesangbuchlied_by_version(version: String!, id: ID!): version_gesangbuchlied
  termin(filter: termin_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [termin!]!
  termin_by_id(id: ID!, version: String): termin
  termin_aggregated(groupBy: [String], filter: termin_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [termin_aggregated!]!
  termin_by_version(version: String!, id: ID!): version_termin
  auftrag(filter: auftrag_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [auftrag!]!
  auftrag_by_id(id: ID!, version: String): auftrag
  auftrag_aggregated(groupBy: [String], filter: auftrag_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [auftrag_aggregated!]!
  auftrag_by_version(version: String!, id: ID!): version_auftrag
  gesangbuchlied_files(filter: gesangbuchlied_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [gesangbuchlied_files!]!
  gesangbuchlied_files_by_id(id: ID!, version: String): gesangbuchlied_files
  gesangbuchlied_files_aggregated(groupBy: [String], filter: gesangbuchlied_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [gesangbuchlied_files_aggregated!]!
  gesangbuchlied_files_by_version(version: String!, id: ID!): version_gesangbuchlied_files
  directus_sync_id_map(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_sync_id_map!]!
  directus_sync_id_map_by_id(id: ID!, version: String): directus_sync_id_map
  directus_sync_id_map_aggregated(groupBy: [String], filter: directus_sync_id_map_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_sync_id_map_aggregated!]!
  directus_sync_id_map_by_version(version: String!, id: ID!): version_directus_sync_id_map
  autor(filter: autor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [autor!]!
  autor_by_id(id: ID!, version: String): autor
  autor_aggregated(groupBy: [String], filter: autor_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [autor_aggregated!]!
  autor_by_version(version: String!, id: ID!): version_autor
  melodie_autor(filter: melodie_autor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [melodie_autor!]!
  melodie_autor_by_id(id: ID!, version: String): melodie_autor
  melodie_autor_aggregated(groupBy: [String], filter: melodie_autor_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [melodie_autor_aggregated!]!
  melodie_autor_by_version(version: String!, id: ID!): version_melodie_autor
  melodie(filter: melodie_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [melodie!]!
  melodie_by_id(id: ID!, version: String): melodie
  melodie_aggregated(groupBy: [String], filter: melodie_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [melodie_aggregated!]!
  melodie_by_version(version: String!, id: ID!): version_melodie
  kategorie(filter: kategorie_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [kategorie!]!
  kategorie_by_id(id: ID!, version: String): kategorie
  kategorie_aggregated(groupBy: [String], filter: kategorie_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [kategorie_aggregated!]!
  kategorie_by_version(version: String!, id: ID!): version_kategorie
}

type Mutation {
  create_bewertungKleinerKreis_items(filter: bewertungKleinerKreis_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_bewertungKleinerKreis_input!]): [bewertungKleinerKreis!]!
  create_bewertungKleinerKreis_item(data: create_bewertungKleinerKreis_input!): bewertungKleinerKreis
  create_arbeitskreis_items(filter: arbeitskreis_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_arbeitskreis_input!]): [arbeitskreis!]!
  create_arbeitskreis_item(data: create_arbeitskreis_input!): arbeitskreis
  create_melodie_files_items(filter: melodie_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_melodie_files_input!]): [melodie_files!]!
  create_melodie_files_item(data: create_melodie_files_input!): melodie_files
  create_gesangbuchlied_kategorie_items(filter: gesangbuchlied_kategorie_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_gesangbuchlied_kategorie_input!]): [gesangbuchlied_kategorie!]!
  create_gesangbuchlied_kategorie_item(data: create_gesangbuchlied_kategorie_input!): gesangbuchlied_kategorie
  create_lizenz_items(filter: lizenz_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_lizenz_input!]): [lizenz!]!
  create_lizenz_item(data: create_lizenz_input!): lizenz
  create_text_autor_items(filter: text_autor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_text_autor_input!]): [text_autor!]!
  create_text_autor_item(data: create_text_autor_input!): text_autor
  create_text_items(filter: text_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_text_input!]): [text!]!
  create_text_item(data: create_text_input!): text
  create_gesangbuchlied_items(filter: gesangbuchlied_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_gesangbuchlied_input!]): [gesangbuchlied!]!
  create_gesangbuchlied_item(data: create_gesangbuchlied_input!): gesangbuchlied
  create_termin_items(filter: termin_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_termin_input!]): [termin!]!
  create_termin_item(data: create_termin_input!): termin
  create_auftrag_items(filter: auftrag_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_auftrag_input!]): [auftrag!]!
  create_auftrag_item(data: create_auftrag_input!): auftrag
  create_gesangbuchlied_files_items(filter: gesangbuchlied_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_gesangbuchlied_files_input!]): [gesangbuchlied_files!]!
  create_gesangbuchlied_files_item(data: create_gesangbuchlied_files_input!): gesangbuchlied_files
  create_directus_sync_id_map_items(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_sync_id_map_input!]): [directus_sync_id_map!]!
  create_directus_sync_id_map_item(data: create_directus_sync_id_map_input!): directus_sync_id_map
  create_autor_items(filter: autor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_autor_input!]): [autor!]!
  create_autor_item(data: create_autor_input!): autor
  create_melodie_autor_items(filter: melodie_autor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_melodie_autor_input!]): [melodie_autor!]!
  create_melodie_autor_item(data: create_melodie_autor_input!): melodie_autor
  create_melodie_items(filter: melodie_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_melodie_input!]): [melodie!]!
  create_melodie_item(data: create_melodie_input!): melodie
  create_kategorie_items(filter: kategorie_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_kategorie_input!]): [kategorie!]!
  create_kategorie_item(data: create_kategorie_input!): kategorie
  update_bewertungKleinerKreis_items(filter: bewertungKleinerKreis_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_bewertungKleinerKreis_input!): [bewertungKleinerKreis!]!
  update_bewertungKleinerKreis_batch(filter: bewertungKleinerKreis_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_bewertungKleinerKreis_input!]): [bewertungKleinerKreis!]!
  update_bewertungKleinerKreis_item(id: ID!, data: update_bewertungKleinerKreis_input!): bewertungKleinerKreis
  update_arbeitskreis_items(filter: arbeitskreis_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_arbeitskreis_input!): [arbeitskreis!]!
  update_arbeitskreis_batch(filter: arbeitskreis_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_arbeitskreis_input!]): [arbeitskreis!]!
  update_arbeitskreis_item(id: ID!, data: update_arbeitskreis_input!): arbeitskreis
  update_melodie_files_items(filter: melodie_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_melodie_files_input!): [melodie_files!]!
  update_melodie_files_batch(filter: melodie_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_melodie_files_input!]): [melodie_files!]!
  update_melodie_files_item(id: ID!, data: update_melodie_files_input!): melodie_files
  update_gesangbuchlied_kategorie_items(filter: gesangbuchlied_kategorie_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_gesangbuchlied_kategorie_input!): [gesangbuchlied_kategorie!]!
  update_gesangbuchlied_kategorie_batch(filter: gesangbuchlied_kategorie_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_gesangbuchlied_kategorie_input!]): [gesangbuchlied_kategorie!]!
  update_gesangbuchlied_kategorie_item(id: ID!, data: update_gesangbuchlied_kategorie_input!): gesangbuchlied_kategorie
  update_lizenz_items(filter: lizenz_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_lizenz_input!): [lizenz!]!
  update_lizenz_batch(filter: lizenz_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_lizenz_input!]): [lizenz!]!
  update_lizenz_item(id: ID!, data: update_lizenz_input!): lizenz
  update_text_autor_items(filter: text_autor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_text_autor_input!): [text_autor!]!
  update_text_autor_batch(filter: text_autor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_text_autor_input!]): [text_autor!]!
  update_text_autor_item(id: ID!, data: update_text_autor_input!): text_autor
  update_text_items(filter: text_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_text_input!): [text!]!
  update_text_batch(filter: text_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_text_input!]): [text!]!
  update_text_item(id: ID!, data: update_text_input!): text
  update_gesangbuchlied_items(filter: gesangbuchlied_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_gesangbuchlied_input!): [gesangbuchlied!]!
  update_gesangbuchlied_batch(filter: gesangbuchlied_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_gesangbuchlied_input!]): [gesangbuchlied!]!
  update_gesangbuchlied_item(id: ID!, data: update_gesangbuchlied_input!): gesangbuchlied
  update_termin_items(filter: termin_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_termin_input!): [termin!]!
  update_termin_batch(filter: termin_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_termin_input!]): [termin!]!
  update_termin_item(id: ID!, data: update_termin_input!): termin
  update_auftrag_items(filter: auftrag_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_auftrag_input!): [auftrag!]!
  update_auftrag_batch(filter: auftrag_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_auftrag_input!]): [auftrag!]!
  update_auftrag_item(id: ID!, data: update_auftrag_input!): auftrag
  update_gesangbuchlied_files_items(filter: gesangbuchlied_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_gesangbuchlied_files_input!): [gesangbuchlied_files!]!
  update_gesangbuchlied_files_batch(filter: gesangbuchlied_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_gesangbuchlied_files_input!]): [gesangbuchlied_files!]!
  update_gesangbuchlied_files_item(id: ID!, data: update_gesangbuchlied_files_input!): gesangbuchlied_files
  update_directus_sync_id_map_items(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_sync_id_map_input!): [directus_sync_id_map!]!
  update_directus_sync_id_map_batch(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_sync_id_map_input!]): [directus_sync_id_map!]!
  update_directus_sync_id_map_item(id: ID!, data: update_directus_sync_id_map_input!): directus_sync_id_map
  update_autor_items(filter: autor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_autor_input!): [autor!]!
  update_autor_batch(filter: autor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_autor_input!]): [autor!]!
  update_autor_item(id: ID!, data: update_autor_input!): autor
  update_melodie_autor_items(filter: melodie_autor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_melodie_autor_input!): [melodie_autor!]!
  update_melodie_autor_batch(filter: melodie_autor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_melodie_autor_input!]): [melodie_autor!]!
  update_melodie_autor_item(id: ID!, data: update_melodie_autor_input!): melodie_autor
  update_melodie_items(filter: melodie_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_melodie_input!): [melodie!]!
  update_melodie_batch(filter: melodie_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_melodie_input!]): [melodie!]!
  update_melodie_item(id: ID!, data: update_melodie_input!): melodie
  update_kategorie_items(filter: kategorie_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_kategorie_input!): [kategorie!]!
  update_kategorie_batch(filter: kategorie_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_kategorie_input!]): [kategorie!]!
  update_kategorie_item(id: ID!, data: update_kategorie_input!): kategorie
  delete_bewertungKleinerKreis_items(ids: [ID]!): delete_many
  delete_bewertungKleinerKreis_item(id: ID!): delete_one
  delete_arbeitskreis_items(ids: [ID]!): delete_many
  delete_arbeitskreis_item(id: ID!): delete_one
  delete_melodie_files_items(ids: [ID]!): delete_many
  delete_melodie_files_item(id: ID!): delete_one
  delete_gesangbuchlied_kategorie_items(ids: [ID]!): delete_many
  delete_gesangbuchlied_kategorie_item(id: ID!): delete_one
  delete_lizenz_items(ids: [ID]!): delete_many
  delete_lizenz_item(id: ID!): delete_one
  delete_text_autor_items(ids: [ID]!): delete_many
  delete_text_autor_item(id: ID!): delete_one
  delete_text_items(ids: [ID]!): delete_many
  delete_text_item(id: ID!): delete_one
  delete_gesangbuchlied_items(ids: [ID]!): delete_many
  delete_gesangbuchlied_item(id: ID!): delete_one
  delete_termin_items(ids: [ID]!): delete_many
  delete_termin_item(id: ID!): delete_one
  delete_auftrag_items(ids: [ID]!): delete_many
  delete_auftrag_item(id: ID!): delete_one
  delete_gesangbuchlied_files_items(ids: [ID]!): delete_many
  delete_gesangbuchlied_files_item(id: ID!): delete_one
  delete_directus_sync_id_map_items(ids: [ID]!): delete_many
  delete_directus_sync_id_map_item(id: ID!): delete_one
  delete_autor_items(ids: [ID]!): delete_many
  delete_autor_item(id: ID!): delete_one
  delete_melodie_autor_items(ids: [ID]!): delete_many
  delete_melodie_autor_item(id: ID!): delete_one
  delete_melodie_items(ids: [ID]!): delete_many
  delete_melodie_item(id: ID!): delete_one
  delete_kategorie_items(ids: [ID]!): delete_many
  delete_kategorie_item(id: ID!): delete_one
}

type Subscription {
  bewertungKleinerKreis_mutated(event: EventEnum): bewertungKleinerKreis_mutated
  arbeitskreis_mutated(event: EventEnum): arbeitskreis_mutated
  melodie_files_mutated(event: EventEnum): melodie_files_mutated
  gesangbuchlied_kategorie_mutated(event: EventEnum): gesangbuchlied_kategorie_mutated
  lizenz_mutated(event: EventEnum): lizenz_mutated
  text_autor_mutated(event: EventEnum): text_autor_mutated
  text_mutated(event: EventEnum): text_mutated
  gesangbuchlied_mutated(event: EventEnum): gesangbuchlied_mutated
  termin_mutated(event: EventEnum): termin_mutated
  auftrag_mutated(event: EventEnum): auftrag_mutated
  gesangbuchlied_files_mutated(event: EventEnum): gesangbuchlied_files_mutated
  directus_activity_mutated(event: EventEnum): directus_activity_mutated
  directus_presets_mutated(event: EventEnum): directus_presets_mutated
  directus_folders_mutated(event: EventEnum): directus_folders_mutated
  directus_files_mutated(event: EventEnum): directus_files_mutated
  directus_roles_mutated(event: EventEnum): directus_roles_mutated
  directus_permissions_mutated(event: EventEnum): directus_permissions_mutated
  directus_users_mutated(event: EventEnum): directus_users_mutated
  directus_webhooks_mutated(event: EventEnum): directus_webhooks_mutated
  directus_panels_mutated(event: EventEnum): directus_panels_mutated
  directus_dashboards_mutated(event: EventEnum): directus_dashboards_mutated
  directus_revisions_mutated(event: EventEnum): directus_revisions_mutated
  directus_notifications_mutated(event: EventEnum): directus_notifications_mutated
  directus_settings_mutated(event: EventEnum): directus_settings_mutated
  directus_shares_mutated(event: EventEnum): directus_shares_mutated
  directus_access_mutated(event: EventEnum): directus_access_mutated
  directus_flows_mutated(event: EventEnum): directus_flows_mutated
  directus_operations_mutated(event: EventEnum): directus_operations_mutated
  directus_translations_mutated(event: EventEnum): directus_translations_mutated
  directus_policies_mutated(event: EventEnum): directus_policies_mutated
  directus_comments_mutated(event: EventEnum): directus_comments_mutated
  directus_versions_mutated(event: EventEnum): directus_versions_mutated
  directus_sync_id_map_mutated(event: EventEnum): directus_sync_id_map_mutated
  autor_mutated(event: EventEnum): autor_mutated
  melodie_autor_mutated(event: EventEnum): melodie_autor_mutated
  melodie_mutated(event: EventEnum): melodie_mutated
  kategorie_mutated(event: EventEnum): kategorie_mutated
}

"""The `Boolean` scalar type represents `true` or `false`."""
scalar Boolean

"""ISO8601 Date values"""
scalar Date

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

"""BigInt value"""
scalar GraphQLBigInt

"""A Float or a String"""
scalar GraphQLStringOrFloat

"""Hashed string values"""
scalar Hash

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar ID

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

enum EventEnum {
  create
  update
  delete
}

type arbeitskreis {
  id: ID!
  name: String
  email: String
  ansprechpartner: String
  icon: String
}

type arbeitskreis_aggregated {
  group: JSON
  countAll: Int
  count: arbeitskreis_aggregated_count
  countDistinct: arbeitskreis_aggregated_count
  avg: arbeitskreis_aggregated_fields
  sum: arbeitskreis_aggregated_fields
  avgDistinct: arbeitskreis_aggregated_fields
  sumDistinct: arbeitskreis_aggregated_fields
  min: arbeitskreis_aggregated_fields
  max: arbeitskreis_aggregated_fields
}

type arbeitskreis_aggregated_count {
  id: Int
  name: Int
  email: Int
  ansprechpartner: Int
  icon: Int
}

type arbeitskreis_aggregated_fields {
  id: Float
}

type arbeitskreis_mutated {
  key: ID!
  event: EventEnum
  data: arbeitskreis
}

type auftrag {
  id: ID!
  status: String
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  arbeitskreisId(filter: arbeitskreis_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): arbeitskreis
  textId(filter: text_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): text
  auftragsartText: String
  auftraggeberId(filter: arbeitskreis_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): arbeitskreis
}

type auftrag_aggregated {
  group: JSON
  countAll: Int
  count: auftrag_aggregated_count
  countDistinct: auftrag_aggregated_count
  avg: auftrag_aggregated_fields
  sum: auftrag_aggregated_fields
  avgDistinct: auftrag_aggregated_fields
  sumDistinct: auftrag_aggregated_fields
  min: auftrag_aggregated_fields
  max: auftrag_aggregated_fields
}

type auftrag_aggregated_count {
  id: Int
  status: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  arbeitskreisId: Int
  textId: Int
  auftragsartText: Int
  auftraggeberId: Int
}

type auftrag_aggregated_fields {
  id: Float
  arbeitskreisId: Float
  textId: Float
  auftraggeberId: Float
}

type auftrag_mutated {
  key: ID!
  event: EventEnum
  data: auftrag
}

type autor {
  id: ID!
  status: String
  vorname: String
  nachname: String
  geburtsjahr: Int
  sterbejahr: Int
}

type autor_aggregated {
  group: JSON
  countAll: Int
  count: autor_aggregated_count
  countDistinct: autor_aggregated_count
  avg: autor_aggregated_fields
  sum: autor_aggregated_fields
  avgDistinct: autor_aggregated_fields
  sumDistinct: autor_aggregated_fields
  min: autor_aggregated_fields
  max: autor_aggregated_fields
}

type autor_aggregated_count {
  id: Int
  status: Int
  vorname: Int
  nachname: Int
  geburtsjahr: Int
  sterbejahr: Int
}

type autor_aggregated_fields {
  id: Float
  geburtsjahr: Float
  sterbejahr: Float
}

type autor_mutated {
  key: ID!
  event: EventEnum
  data: autor
}

type bewertungKleinerKreis {
  id: ID!
  bezeichner: String
  rangfolge: Int
}

type bewertungKleinerKreis_aggregated {
  group: JSON
  countAll: Int
  count: bewertungKleinerKreis_aggregated_count
  countDistinct: bewertungKleinerKreis_aggregated_count
  avg: bewertungKleinerKreis_aggregated_fields
  sum: bewertungKleinerKreis_aggregated_fields
  avgDistinct: bewertungKleinerKreis_aggregated_fields
  sumDistinct: bewertungKleinerKreis_aggregated_fields
  min: bewertungKleinerKreis_aggregated_fields
  max: bewertungKleinerKreis_aggregated_fields
}

type bewertungKleinerKreis_aggregated_count {
  id: Int
  bezeichner: Int
  rangfolge: Int
}

type bewertungKleinerKreis_aggregated_fields {
  id: Float
  rangfolge: Float
}

type bewertungKleinerKreis_mutated {
  key: ID!
  event: EventEnum
  data: bewertungKleinerKreis
}

type count_functions {
  count: Int
}

type datetime_functions {
  year: Int
  month: Int
  week: Int
  day: Int
  weekday: Int
  hour: Int
  minute: Int
  second: Int
}

type delete_many {
  ids: [ID]!
}

type delete_one {
  id: ID!
}

type directus_access {
  id: ID!
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  policy(filter: directus_policies_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_policies
  sort: Int
}

type directus_access_mutated {
  key: ID!
  event: EventEnum
  data: directus_access
}

type directus_activity {
  id: ID!
  action: String!
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  timestamp: Date
  timestamp_func: datetime_functions
  ip: String
  user_agent: String
  collection: String!
  item: String!
  comment: String
  origin: String
  revisions(filter: directus_revisions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_revisions]
  revisions_func: count_functions
}

type directus_activity_mutated {
  key: ID!
  event: EventEnum
  data: directus_activity
}

type directus_comments {
  id: ID!
  collection: String!
  item: String!
  comment: String!
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_comments_mutated {
  key: ID!
  event: EventEnum
  data: directus_comments
}

type directus_dashboards {
  id: ID!
  name: String!
  icon: String
  note: String
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  color: String
  panels(filter: directus_panels_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_panels]
  panels_func: count_functions
}

type directus_dashboards_mutated {
  key: ID!
  event: EventEnum
  data: directus_dashboards
}

type directus_files {
  id: ID!
  storage: String!
  filename_disk: String
  filename_download: String!
  title: String
  type: String
  folder(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
  uploaded_by(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  created_on: Date
  created_on_func: datetime_functions
  modified_by(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  modified_on: Date
  modified_on_func: datetime_functions
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  tags_func: count_functions
  metadata: JSON
  metadata_func: count_functions
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  tus_data_func: count_functions
  uploaded_on: Date
  uploaded_on_func: datetime_functions
}

type directus_files_mutated {
  key: ID!
  event: EventEnum
  data: directus_files
}

type directus_flows {
  id: ID!
  name: String!
  icon: String
  color: String
  description: String
  status: String
  trigger: String
  accountability: String
  options: JSON
  options_func: count_functions
  operation(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  operations(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_operations]
  operations_func: count_functions
}

type directus_flows_mutated {
  key: ID!
  event: EventEnum
  data: directus_flows
}

type directus_folders {
  id: ID!
  name: String!
  parent(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
}

type directus_folders_mutated {
  key: ID!
  event: EventEnum
  data: directus_folders
}

type directus_notifications {
  id: ID!
  timestamp: Date
  timestamp_func: datetime_functions
  status: String
  recipient(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  sender(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  subject: String!
  message: String
  collection: String
  item: String
}

type directus_notifications_mutated {
  key: ID!
  event: EventEnum
  data: directus_notifications
}

type directus_operations {
  id: ID!
  name: String
  key: String!
  type: String!
  position_x: Int!
  position_y: Int!
  options: JSON
  options_func: count_functions
  resolve(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  reject(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  flow(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_flows
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_operations_mutated {
  key: ID!
  event: EventEnum
  data: directus_operations
}

type directus_panels {
  id: ID!
  dashboard(filter: directus_dashboards_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_dashboards
  name: String
  icon: String
  color: String
  show_header: Boolean!
  note: String
  type: String!
  position_x: Int!
  position_y: Int!
  width: Int!
  height: Int!
  options: JSON
  options_func: count_functions
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_panels_mutated {
  key: ID!
  event: EventEnum
  data: directus_panels
}

type directus_permissions {
  id: ID
  collection: String!
  action: String!
  permissions: JSON
  permissions_func: count_functions
  validation: JSON
  validation_func: count_functions
  presets: JSON
  presets_func: count_functions
  fields: [String]
  policy(filter: directus_policies_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_policies
}

type directus_permissions_mutated {
  key: ID!
  event: EventEnum
  data: directus_permissions
}

type directus_policies {
  id: ID!
  name: String!
  icon: String
  description: String
  ip_access: [String]

  """$t:field_options.directus_policies.enforce_tfa"""
  enforce_tfa: Boolean!
  admin_access: Boolean!
  app_access: Boolean!
  permissions(filter: directus_permissions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_permissions]
  permissions_func: count_functions
  users(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  users_func: count_functions
  roles(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  roles_func: count_functions
}

type directus_policies_mutated {
  key: ID!
  event: EventEnum
  data: directus_policies
}

type directus_presets {
  id: ID!
  bookmark: String
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  collection: String
  search: String
  layout: String
  layout_query: JSON
  layout_query_func: count_functions
  layout_options: JSON
  layout_options_func: count_functions
  refresh_interval: Int
  filter: JSON
  filter_func: count_functions
  icon: String
  color: String
}

type directus_presets_mutated {
  key: ID!
  event: EventEnum
  data: directus_presets
}

type directus_revisions {
  id: ID!
  activity(filter: directus_activity_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_activity
  collection: String!
  item: String!
  data: JSON
  data_func: count_functions
  delta: JSON
  delta_func: count_functions
  parent(filter: directus_revisions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_revisions
  version(filter: directus_versions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_versions
}

type directus_revisions_mutated {
  key: ID!
  event: EventEnum
  data: directus_revisions
}

type directus_roles {
  id: ID!
  name: String!
  icon: String
  description: String
  parent(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  children(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_roles]
  children_func: count_functions
  policies(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  policies_func: count_functions
  users(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_users]
  users_func: count_functions
}

type directus_roles_mutated {
  key: ID!
  event: EventEnum
  data: directus_roles
}

type directus_settings {
  id: ID!
  project_name: String
  project_url: String

  """$t:field_options.directus_settings.project_color_note"""
  project_color: String
  project_logo(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_foreground(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_background(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_note: String
  auth_login_attempts: Int
  auth_password_policy: String
  storage_asset_transform: String
  storage_asset_presets: JSON
  storage_asset_presets_func: count_functions
  custom_css: String
  storage_default_folder(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
  basemaps: JSON
  basemaps_func: count_functions
  mapbox_key: String
  module_bar: JSON
  module_bar_func: count_functions
  project_descriptor: String
  default_language: String
  custom_aspect_ratios: JSON
  custom_aspect_ratios_func: count_functions
  public_favicon(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  default_appearance: String
  default_theme_light: String
  theme_light_overrides: JSON
  theme_light_overrides_func: count_functions
  default_theme_dark: String
  theme_dark_overrides: JSON
  theme_dark_overrides_func: count_functions
  report_error_url: String
  report_bug_url: String
  report_feature_url: String

  """$t:fields.directus_settings.public_registration_note"""
  public_registration: Boolean!

  """$t:fields.directus_settings.public_registration_verify_email_note"""
  public_registration_verify_email: Boolean
  public_registration_role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles

  """$t:fields.directus_settings.public_registration_email_filter_note"""
  public_registration_email_filter: JSON
  public_registration_email_filter_func: count_functions
}

type directus_settings_mutated {
  key: ID!
  event: EventEnum
  data: directus_settings
}

type directus_shares {
  id: ID!
  name: String
  collection: String!
  item: String!
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles

  """$t:shared_leave_blank_for_passwordless_access"""
  password: Hash
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions

  """$t:shared_leave_blank_for_unlimited"""
  date_start: Date
  date_start_func: datetime_functions

  """$t:shared_leave_blank_for_unlimited"""
  date_end: Date
  date_end_func: datetime_functions
  times_used: Int

  """$t:shared_leave_blank_for_unlimited"""
  max_uses: Int
}

type directus_shares_mutated {
  key: ID!
  event: EventEnum
  data: directus_shares
}

type directus_sync_id_map {
  id: ID!
  table: String!
  sync_id: String!
  local_id: String!
  created_at: Date
  created_at_func: datetime_functions
}

type directus_sync_id_map_aggregated {
  group: JSON
  countAll: Int
  count: directus_sync_id_map_aggregated_count
  countDistinct: directus_sync_id_map_aggregated_count
  avg: directus_sync_id_map_aggregated_fields
  sum: directus_sync_id_map_aggregated_fields
  avgDistinct: directus_sync_id_map_aggregated_fields
  sumDistinct: directus_sync_id_map_aggregated_fields
  min: directus_sync_id_map_aggregated_fields
  max: directus_sync_id_map_aggregated_fields
}

type directus_sync_id_map_aggregated_count {
  id: Int
  table: Int
  sync_id: Int
  local_id: Int
  created_at: Int
}

type directus_sync_id_map_aggregated_fields {
  id: Float
}

type directus_sync_id_map_mutated {
  key: ID!
  event: EventEnum
  data: directus_sync_id_map
}

type directus_translations {
  id: ID!
  language: String!
  key: String!
  value: String!
}

type directus_translations_mutated {
  key: ID!
  event: EventEnum
  data: directus_translations
}

type directus_users {
  id: ID!
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  tags_func: count_functions
  avatar(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  language: String
  tfa_secret: Hash
  status: String
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  token: Hash
  last_access: Date
  last_access_func: datetime_functions
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  auth_data_func: count_functions
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_light_overrides_func: count_functions
  theme_dark_overrides: JSON
  theme_dark_overrides_func: count_functions
  policies(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  policies_func: count_functions
}

type directus_users_mutated {
  key: ID!
  event: EventEnum
  data: directus_users
}

type directus_versions {
  id: ID!
  key: String!
  name: String
  collection: String!
  item: String!
  hash: String
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  delta: JSON
  delta_func: count_functions
}

type directus_versions_mutated {
  key: ID!
  event: EventEnum
  data: directus_versions
}

type directus_webhooks {
  id: ID!
  name: String!
  method: String
  url: String!
  status: String
  data: Boolean
  actions: [String]!
  collections: [String]!
  headers: JSON
  headers_func: count_functions
  was_active_before_deprecation: Boolean!
  migrated_flow(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_flows
}

type directus_webhooks_mutated {
  key: ID!
  event: EventEnum
  data: directus_webhooks
}

type gesangbuchlied {
  id: ID!
  status: String
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  rueckfrageAutor: String
  bewertungKleinerKreis(filter: bewertungKleinerKreis_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): bewertungKleinerKreis
  bewertungAnmerkung: String

  """
  Der Wert wird automatisch gesetzt, wenn eine Änderung über die Gesangbuch-Webseite im Lied (Text o. Melodie) vorgenommen wurde. Ist nach Bewertung/Sichtung wieder manuell zurück zu setzen.
  """
  liedHatAenderung: Boolean
  titel: String
  textId(filter: text_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): text
  melodieId(filter: melodie_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): melodie
  liednummer2000: Int
  melodieGeaendert: Boolean
  textGeaendert: Boolean
  anmerkung: String
  linkCloud: String
  externerLink: String
  einreicherName: String
  gesangbuchlied_satz_mit_melodie_und_text(filter: gesangbuchlied_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [gesangbuchlied_files]
  gesangbuchlied_satz_mit_melodie_und_text_func: count_functions
  kategorieId(filter: gesangbuchlied_kategorie_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [gesangbuchlied_kategorie]
  kategorieId_func: count_functions
}

type gesangbuchlied_aggregated {
  group: JSON
  countAll: Int
  count: gesangbuchlied_aggregated_count
  countDistinct: gesangbuchlied_aggregated_count
  avg: gesangbuchlied_aggregated_fields
  sum: gesangbuchlied_aggregated_fields
  avgDistinct: gesangbuchlied_aggregated_fields
  sumDistinct: gesangbuchlied_aggregated_fields
  min: gesangbuchlied_aggregated_fields
  max: gesangbuchlied_aggregated_fields
}

type gesangbuchlied_aggregated_count {
  id: Int
  status: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  rueckfrageAutor: Int
  bewertungKleinerKreis: Int
  bewertungAnmerkung: Int

  """
  Der Wert wird automatisch gesetzt, wenn eine Änderung über die Gesangbuch-Webseite im Lied (Text o. Melodie) vorgenommen wurde. Ist nach Bewertung/Sichtung wieder manuell zurück zu setzen.
  """
  liedHatAenderung: Int
  titel: Int
  textId: Int
  melodieId: Int
  liednummer2000: Int
  melodieGeaendert: Int
  textGeaendert: Int
  anmerkung: Int
  linkCloud: Int
  externerLink: Int
  einreicherName: Int
  gesangbuchlied_satz_mit_melodie_und_text: Int
  kategorieId: Int
}

type gesangbuchlied_aggregated_fields {
  id: Float
  bewertungKleinerKreis: Float
  textId: Float
  melodieId: Float
  liednummer2000: Float
}

type gesangbuchlied_files {
  id: ID!
  gesangbuchlied_id(filter: gesangbuchlied_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): gesangbuchlied
  directus_files_id(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
}

type gesangbuchlied_files_aggregated {
  group: JSON
  countAll: Int
  count: gesangbuchlied_files_aggregated_count
  countDistinct: gesangbuchlied_files_aggregated_count
  avg: gesangbuchlied_files_aggregated_fields
  sum: gesangbuchlied_files_aggregated_fields
  avgDistinct: gesangbuchlied_files_aggregated_fields
  sumDistinct: gesangbuchlied_files_aggregated_fields
  min: gesangbuchlied_files_aggregated_fields
  max: gesangbuchlied_files_aggregated_fields
}

type gesangbuchlied_files_aggregated_count {
  id: Int
  gesangbuchlied_id: Int
  directus_files_id: Int
}

type gesangbuchlied_files_aggregated_fields {
  id: Float
  gesangbuchlied_id: Float
}

type gesangbuchlied_files_mutated {
  key: ID!
  event: EventEnum
  data: gesangbuchlied_files
}

type gesangbuchlied_kategorie {
  id: ID!
  gesangbuchlied_id(filter: gesangbuchlied_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): gesangbuchlied
  kategorie_id(filter: kategorie_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): kategorie
}

type gesangbuchlied_kategorie_aggregated {
  group: JSON
  countAll: Int
  count: gesangbuchlied_kategorie_aggregated_count
  countDistinct: gesangbuchlied_kategorie_aggregated_count
  avg: gesangbuchlied_kategorie_aggregated_fields
  sum: gesangbuchlied_kategorie_aggregated_fields
  avgDistinct: gesangbuchlied_kategorie_aggregated_fields
  sumDistinct: gesangbuchlied_kategorie_aggregated_fields
  min: gesangbuchlied_kategorie_aggregated_fields
  max: gesangbuchlied_kategorie_aggregated_fields
}

type gesangbuchlied_kategorie_aggregated_count {
  id: Int
  gesangbuchlied_id: Int
  kategorie_id: Int
}

type gesangbuchlied_kategorie_aggregated_fields {
  id: Float
  gesangbuchlied_id: Float
  kategorie_id: Float
}

type gesangbuchlied_kategorie_mutated {
  key: ID!
  event: EventEnum
  data: gesangbuchlied_kategorie
}

type gesangbuchlied_mutated {
  key: ID!
  event: EventEnum
  data: gesangbuchlied
}

type kategorie {
  id: ID!
  name: String
  typ: String
}

type kategorie_aggregated {
  group: JSON
  countAll: Int
  count: kategorie_aggregated_count
  countDistinct: kategorie_aggregated_count
  avg: kategorie_aggregated_fields
  sum: kategorie_aggregated_fields
  avgDistinct: kategorie_aggregated_fields
  sumDistinct: kategorie_aggregated_fields
  min: kategorie_aggregated_fields
  max: kategorie_aggregated_fields
}

type kategorie_aggregated_count {
  id: Int
  name: Int
  typ: Int
}

type kategorie_aggregated_fields {
  id: Float
}

type kategorie_mutated {
  key: ID!
  event: EventEnum
  data: kategorie
}

type lizenz {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  name: String
  digital: Boolean
  print: Boolean
}

type lizenz_aggregated {
  group: JSON
  countAll: Int
  count: lizenz_aggregated_count
  countDistinct: lizenz_aggregated_count
  avg: lizenz_aggregated_fields
  sum: lizenz_aggregated_fields
  avgDistinct: lizenz_aggregated_fields
  sumDistinct: lizenz_aggregated_fields
  min: lizenz_aggregated_fields
  max: lizenz_aggregated_fields
}

type lizenz_aggregated_count {
  id: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  name: Int
  digital: Int
  print: Int
}

type lizenz_aggregated_fields {
  id: Float
}

type lizenz_mutated {
  key: ID!
  event: EventEnum
  data: lizenz
}

type melodie {
  id: ID!
  status: String
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  rueckfrageAutor: String
  bewertungKleinerKreis(filter: bewertungKleinerKreis_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): bewertungKleinerKreis
  bewertungAnmerkung: String
  titel: String
  quelle: String
  quelllink: String
  lizenzId(filter: lizenz_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): lizenz
  anmerkung: String
  abc_melodie: JSON
  abc_melodie_func: count_functions
  autorId(filter: melodie_autor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [melodie_autor]
  autorId_func: count_functions
  noten(filter: melodie_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [melodie_files]
  noten_func: count_functions
}

type melodie_aggregated {
  group: JSON
  countAll: Int
  count: melodie_aggregated_count
  countDistinct: melodie_aggregated_count
  avg: melodie_aggregated_fields
  sum: melodie_aggregated_fields
  avgDistinct: melodie_aggregated_fields
  sumDistinct: melodie_aggregated_fields
  min: melodie_aggregated_fields
  max: melodie_aggregated_fields
}

type melodie_aggregated_count {
  id: Int
  status: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  rueckfrageAutor: Int
  bewertungKleinerKreis: Int
  bewertungAnmerkung: Int
  titel: Int
  quelle: Int
  quelllink: Int
  lizenzId: Int
  anmerkung: Int
  abc_melodie: Int
  autorId: Int
  noten: Int
}

type melodie_aggregated_fields {
  id: Float
  bewertungKleinerKreis: Float
  lizenzId: Float
}

type melodie_autor {
  id: ID!
  melodie_id(filter: melodie_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): melodie
  autor_id(filter: autor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): autor
}

type melodie_autor_aggregated {
  group: JSON
  countAll: Int
  count: melodie_autor_aggregated_count
  countDistinct: melodie_autor_aggregated_count
  avg: melodie_autor_aggregated_fields
  sum: melodie_autor_aggregated_fields
  avgDistinct: melodie_autor_aggregated_fields
  sumDistinct: melodie_autor_aggregated_fields
  min: melodie_autor_aggregated_fields
  max: melodie_autor_aggregated_fields
}

type melodie_autor_aggregated_count {
  id: Int
  melodie_id: Int
  autor_id: Int
}

type melodie_autor_aggregated_fields {
  id: Float
  melodie_id: Float
  autor_id: Float
}

type melodie_autor_mutated {
  key: ID!
  event: EventEnum
  data: melodie_autor
}

type melodie_files {
  id: ID!
  melodie_id(filter: melodie_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): melodie
  directus_files_id(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
}

type melodie_files_aggregated {
  group: JSON
  countAll: Int
  count: melodie_files_aggregated_count
  countDistinct: melodie_files_aggregated_count
  avg: melodie_files_aggregated_fields
  sum: melodie_files_aggregated_fields
  avgDistinct: melodie_files_aggregated_fields
  sumDistinct: melodie_files_aggregated_fields
  min: melodie_files_aggregated_fields
  max: melodie_files_aggregated_fields
}

type melodie_files_aggregated_count {
  id: Int
  melodie_id: Int
  directus_files_id: Int
}

type melodie_files_aggregated_fields {
  id: Float
  melodie_id: Float
}

type melodie_files_mutated {
  key: ID!
  event: EventEnum
  data: melodie_files
}

type melodie_mutated {
  key: ID!
  event: EventEnum
  data: melodie
}

type termin {
  id: ID!
  status: String
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  title: String
  start: Date
  start_func: datetime_functions
  ende: Date
  ende_func: datetime_functions
  bemerkung: String
  arbeitskreisId(filter: arbeitskreis_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): arbeitskreis
  istMeilenstein: Boolean
  sort: Int
}

type termin_aggregated {
  group: JSON
  countAll: Int
  count: termin_aggregated_count
  countDistinct: termin_aggregated_count
  avg: termin_aggregated_fields
  sum: termin_aggregated_fields
  avgDistinct: termin_aggregated_fields
  sumDistinct: termin_aggregated_fields
  min: termin_aggregated_fields
  max: termin_aggregated_fields
}

type termin_aggregated_count {
  id: Int
  status: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  title: Int
  start: Int
  ende: Int
  bemerkung: Int
  arbeitskreisId: Int
  istMeilenstein: Int
  sort: Int
}

type termin_aggregated_fields {
  id: Float
  arbeitskreisId: Float
  sort: Float
}

type termin_mutated {
  key: ID!
  event: EventEnum
  data: termin
}

type text {
  id: ID!
  status: String
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  rueckfrageAutor: String
  titel: String
  bewertungKleinerKreis(filter: bewertungKleinerKreis_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): bewertungKleinerKreis
  bewertungAnmerkung: String
  strophenEinzeln: JSON
  strophenEinzeln_func: count_functions
  quelle: String
  quelllink: String
  lizenzId(filter: lizenz_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): lizenz
  anmerkung: String
  autorId(filter: text_autor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [text_autor]
  autorId_func: count_functions
}

type text_aggregated {
  group: JSON
  countAll: Int
  count: text_aggregated_count
  countDistinct: text_aggregated_count
  avg: text_aggregated_fields
  sum: text_aggregated_fields
  avgDistinct: text_aggregated_fields
  sumDistinct: text_aggregated_fields
  min: text_aggregated_fields
  max: text_aggregated_fields
}

type text_aggregated_count {
  id: Int
  status: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  rueckfrageAutor: Int
  titel: Int
  bewertungKleinerKreis: Int
  bewertungAnmerkung: Int
  strophenEinzeln: Int
  quelle: Int
  quelllink: Int
  lizenzId: Int
  anmerkung: Int
  autorId: Int
}

type text_aggregated_fields {
  id: Float
  bewertungKleinerKreis: Float
  lizenzId: Float
}

type text_autor {
  id: ID!
  text_id(filter: text_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): text
  autor_id(filter: autor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): autor
}

type text_autor_aggregated {
  group: JSON
  countAll: Int
  count: text_autor_aggregated_count
  countDistinct: text_autor_aggregated_count
  avg: text_autor_aggregated_fields
  sum: text_autor_aggregated_fields
  avgDistinct: text_autor_aggregated_fields
  sumDistinct: text_autor_aggregated_fields
  min: text_autor_aggregated_fields
  max: text_autor_aggregated_fields
}

type text_autor_aggregated_count {
  id: Int
  text_id: Int
  autor_id: Int
}

type text_autor_aggregated_fields {
  id: Float
  text_id: Float
  autor_id: Float
}

type text_autor_mutated {
  key: ID!
  event: EventEnum
  data: text_autor
}

type text_mutated {
  key: ID!
  event: EventEnum
  data: text
}

""""""
type version_arbeitskreis {
  id: ID
  name: String
  email: String
  ansprechpartner: String
  icon: String
}

""""""
type version_auftrag {
  id: ID
  status: String
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  arbeitskreisId: JSON
  textId: JSON
  auftragsartText: String
  auftraggeberId: JSON
}

""""""
type version_autor {
  id: ID
  status: String
  vorname: String
  nachname: String
  geburtsjahr: Int
  sterbejahr: Int
}

""""""
type version_bewertungKleinerKreis {
  id: ID
  bezeichner: String
  rangfolge: Int
}

""""""
type version_directus_sync_id_map {
  id: ID
  table: String
  sync_id: String
  local_id: String
  created_at: Date
}

""""""
type version_gesangbuchlied {
  id: ID
  status: String
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  rueckfrageAutor: String
  bewertungKleinerKreis: JSON
  bewertungAnmerkung: String

  """
  Der Wert wird automatisch gesetzt, wenn eine Änderung über die Gesangbuch-Webseite im Lied (Text o. Melodie) vorgenommen wurde. Ist nach Bewertung/Sichtung wieder manuell zurück zu setzen.
  """
  liedHatAenderung: Boolean
  titel: String
  textId: JSON
  melodieId: JSON
  liednummer2000: Int
  melodieGeaendert: Boolean
  textGeaendert: Boolean
  anmerkung: String
  linkCloud: String
  externerLink: String
  einreicherName: String
  gesangbuchlied_satz_mit_melodie_und_text: JSON
  kategorieId: JSON
}

""""""
type version_gesangbuchlied_files {
  id: ID
  gesangbuchlied_id: JSON
  directus_files_id: JSON
}

""""""
type version_gesangbuchlied_kategorie {
  id: ID
  gesangbuchlied_id: JSON
  kategorie_id: JSON
}

""""""
type version_kategorie {
  id: ID
  name: String
  typ: String
}

""""""
type version_lizenz {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  name: String
  digital: Boolean
  print: Boolean
}

""""""
type version_melodie {
  id: ID
  status: String
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  rueckfrageAutor: String
  bewertungKleinerKreis: JSON
  bewertungAnmerkung: String
  titel: String
  quelle: String
  quelllink: String
  lizenzId: JSON
  anmerkung: String
  abc_melodie: JSON
  autorId: JSON
  noten: JSON
}

""""""
type version_melodie_autor {
  id: ID
  melodie_id: JSON
  autor_id: JSON
}

""""""
type version_melodie_files {
  id: ID
  melodie_id: JSON
  directus_files_id: JSON
}

""""""
type version_termin {
  id: ID
  status: String
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  title: String
  start: Date
  ende: Date
  bemerkung: String
  arbeitskreisId: JSON
  istMeilenstein: Boolean
  sort: Int
}

""""""
type version_text {
  id: ID
  status: String
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  rueckfrageAutor: String
  titel: String
  bewertungKleinerKreis: JSON
  bewertungAnmerkung: String
  strophenEinzeln: JSON
  quelle: String
  quelllink: String
  lizenzId: JSON
  anmerkung: String
  autorId: JSON
}

""""""
type version_text_autor {
  id: ID
  text_id: JSON
  autor_id: JSON
}

input arbeitskreis_filter {
  id: number_filter_operators
  name: string_filter_operators
  email: string_filter_operators
  ansprechpartner: string_filter_operators
  icon: string_filter_operators
  _and: [arbeitskreis_filter]
  _or: [arbeitskreis_filter]
}

input auftrag_filter {
  id: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  arbeitskreisId: arbeitskreis_filter
  textId: text_filter
  auftragsartText: string_filter_operators
  auftraggeberId: arbeitskreis_filter
  _and: [auftrag_filter]
  _or: [auftrag_filter]
}

input autor_filter {
  id: number_filter_operators
  status: string_filter_operators
  vorname: string_filter_operators
  nachname: string_filter_operators
  geburtsjahr: number_filter_operators
  sterbejahr: number_filter_operators
  _and: [autor_filter]
  _or: [autor_filter]
}

input bewertungKleinerKreis_filter {
  id: number_filter_operators
  bezeichner: string_filter_operators
  rangfolge: number_filter_operators
  _and: [bewertungKleinerKreis_filter]
  _or: [bewertungKleinerKreis_filter]
}

input big_int_filter_operators {
  _eq: GraphQLBigInt
  _neq: GraphQLBigInt
  _in: [GraphQLBigInt]
  _nin: [GraphQLBigInt]
  _gt: GraphQLBigInt
  _gte: GraphQLBigInt
  _lt: GraphQLBigInt
  _lte: GraphQLBigInt
  _null: Boolean
  _nnull: Boolean
  _between: [GraphQLBigInt]
  _nbetween: [GraphQLBigInt]
}

input boolean_filter_operators {
  _eq: Boolean
  _neq: Boolean
  _null: Boolean
  _nnull: Boolean
}

input count_function_filter_operators {
  count: number_filter_operators
}

input create_arbeitskreis_input {
  id: ID
  name: String
  email: String
  ansprechpartner: String
  icon: String
}

input create_auftrag_input {
  id: ID
  status: String
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  arbeitskreisId: create_arbeitskreis_input
  textId: create_text_input
  auftragsartText: String
  auftraggeberId: create_arbeitskreis_input
}

input create_autor_input {
  id: ID
  status: String
  vorname: String
  nachname: String
  geburtsjahr: Int
  sterbejahr: Int
}

input create_bewertungKleinerKreis_input {
  id: ID
  bezeichner: String
  rangfolge: Int
}

input create_directus_access_input {
  id: ID
  role: create_directus_roles_input
  user: create_directus_users_input
  policy: create_directus_policies_input
  sort: Int
}

input create_directus_files_input {
  id: ID
  storage: String!
  filename_disk: String
  filename_download: String!
  title: String
  type: String
  folder: create_directus_folders_input
  uploaded_by: create_directus_users_input
  created_on: Date
  modified_by: create_directus_users_input
  modified_on: Date
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  metadata: JSON
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  uploaded_on: Date
}

input create_directus_folders_input {
  id: ID
  name: String!
  parent: create_directus_folders_input
}

input create_directus_permissions_input {
  id: ID
  collection: String!
  action: String!
  permissions: JSON
  validation: JSON
  presets: JSON
  fields: [String]
  policy: create_directus_policies_input
}

input create_directus_policies_input {
  id: ID
  name: String!
  icon: String
  description: String
  ip_access: [String]

  """$t:field_options.directus_policies.enforce_tfa"""
  enforce_tfa: Boolean!
  admin_access: Boolean!
  app_access: Boolean!
  permissions: [create_directus_permissions_input]
  users: [create_directus_access_input]
  roles: [create_directus_access_input]
}

input create_directus_roles_input {
  id: ID
  name: String!
  icon: String
  description: String
  parent: create_directus_roles_input
  children: [create_directus_roles_input]
  policies: [create_directus_access_input]
  users: [create_directus_users_input]
}

input create_directus_sync_id_map_input {
  id: ID
  table: String!
  sync_id: String!
  local_id: String!
  created_at: Date
}

input create_directus_users_input {
  id: ID
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  avatar: create_directus_files_input
  language: String
  tfa_secret: Hash
  status: String
  role: create_directus_roles_input
  token: Hash
  last_access: Date
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_dark_overrides: JSON
  policies: [create_directus_access_input]
}

input create_gesangbuchlied_files_input {
  id: ID
  gesangbuchlied_id: create_gesangbuchlied_input
  directus_files_id: create_directus_files_input
}

input create_gesangbuchlied_input {
  id: ID
  status: String
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  rueckfrageAutor: String
  bewertungKleinerKreis: create_bewertungKleinerKreis_input
  bewertungAnmerkung: String

  """
  Der Wert wird automatisch gesetzt, wenn eine Änderung über die Gesangbuch-Webseite im Lied (Text o. Melodie) vorgenommen wurde. Ist nach Bewertung/Sichtung wieder manuell zurück zu setzen.
  """
  liedHatAenderung: Boolean
  titel: String
  textId: create_text_input
  melodieId: create_melodie_input
  liednummer2000: Int
  melodieGeaendert: Boolean
  textGeaendert: Boolean
  anmerkung: String
  linkCloud: String
  externerLink: String
  einreicherName: String
  gesangbuchlied_satz_mit_melodie_und_text: [create_gesangbuchlied_files_input]
  kategorieId: [create_gesangbuchlied_kategorie_input]
}

input create_gesangbuchlied_kategorie_input {
  id: ID
  gesangbuchlied_id: create_gesangbuchlied_input
  kategorie_id: create_kategorie_input
}

input create_kategorie_input {
  id: ID
  name: String
  typ: String
}

input create_lizenz_input {
  id: ID
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  name: String
  digital: Boolean
  print: Boolean
}

input create_melodie_autor_input {
  id: ID
  melodie_id: create_melodie_input
  autor_id: create_autor_input
}

input create_melodie_files_input {
  id: ID
  melodie_id: create_melodie_input
  directus_files_id: create_directus_files_input
}

input create_melodie_input {
  id: ID
  status: String
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  rueckfrageAutor: String
  bewertungKleinerKreis: create_bewertungKleinerKreis_input
  bewertungAnmerkung: String
  titel: String
  quelle: String
  quelllink: String
  lizenzId: create_lizenz_input
  anmerkung: String
  abc_melodie: JSON
  autorId: [create_melodie_autor_input]
  noten: [create_melodie_files_input]
}

input create_termin_input {
  id: ID
  status: String
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  title: String
  start: Date
  ende: Date
  bemerkung: String
  arbeitskreisId: create_arbeitskreis_input
  istMeilenstein: Boolean
  sort: Int
}

input create_text_autor_input {
  id: ID
  text_id: create_text_input
  autor_id: create_autor_input
}

input create_text_input {
  id: ID
  status: String
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  rueckfrageAutor: String
  titel: String
  bewertungKleinerKreis: create_bewertungKleinerKreis_input
  bewertungAnmerkung: String
  strophenEinzeln: JSON
  quelle: String
  quelllink: String
  lizenzId: create_lizenz_input
  anmerkung: String
  autorId: [create_text_autor_input]
}

input date_filter_operators {
  _eq: String
  _neq: String
  _gt: String
  _gte: String
  _lt: String
  _lte: String
  _null: Boolean
  _nnull: Boolean
  _in: [String]
  _nin: [String]
  _between: [GraphQLStringOrFloat]
  _nbetween: [GraphQLStringOrFloat]
}

input datetime_function_filter_operators {
  year: number_filter_operators
  month: number_filter_operators
  week: number_filter_operators
  day: number_filter_operators
  weekday: number_filter_operators
  hour: number_filter_operators
  minute: number_filter_operators
  second: number_filter_operators
}

input directus_access_filter {
  id: string_filter_operators
  role: directus_roles_filter
  user: directus_users_filter
  policy: directus_policies_filter
  sort: number_filter_operators
  _and: [directus_access_filter]
  _or: [directus_access_filter]
}

input directus_activity_filter {
  id: number_filter_operators
  action: string_filter_operators
  user: directus_users_filter
  timestamp: date_filter_operators
  timestamp_func: datetime_function_filter_operators
  ip: string_filter_operators
  user_agent: string_filter_operators
  collection: string_filter_operators
  item: string_filter_operators
  comment: string_filter_operators
  origin: string_filter_operators
  revisions: directus_revisions_filter
  revisions_func: count_function_filter_operators
  _and: [directus_activity_filter]
  _or: [directus_activity_filter]
}

input directus_dashboards_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  note: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  color: string_filter_operators
  panels: directus_panels_filter
  panels_func: count_function_filter_operators
  _and: [directus_dashboards_filter]
  _or: [directus_dashboards_filter]
}

input directus_files_filter {
  id: string_filter_operators
  storage: string_filter_operators
  filename_disk: string_filter_operators
  filename_download: string_filter_operators
  title: string_filter_operators
  type: string_filter_operators
  folder: directus_folders_filter
  uploaded_by: directus_users_filter
  created_on: date_filter_operators
  created_on_func: datetime_function_filter_operators
  modified_by: directus_users_filter
  modified_on: date_filter_operators
  modified_on_func: datetime_function_filter_operators
  charset: string_filter_operators
  filesize: big_int_filter_operators
  width: number_filter_operators
  height: number_filter_operators
  duration: number_filter_operators
  embed: string_filter_operators
  description: string_filter_operators
  location: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  metadata: string_filter_operators
  metadata_func: count_function_filter_operators
  focal_point_x: number_filter_operators
  focal_point_y: number_filter_operators
  tus_id: string_filter_operators
  tus_data: string_filter_operators
  tus_data_func: count_function_filter_operators
  uploaded_on: date_filter_operators
  uploaded_on_func: datetime_function_filter_operators
  _and: [directus_files_filter]
  _or: [directus_files_filter]
}

input directus_flows_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  color: string_filter_operators
  description: string_filter_operators
  status: string_filter_operators
  trigger: string_filter_operators
  accountability: string_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  operation: directus_operations_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  operations: directus_operations_filter
  operations_func: count_function_filter_operators
  _and: [directus_flows_filter]
  _or: [directus_flows_filter]
}

input directus_folders_filter {
  id: string_filter_operators
  name: string_filter_operators
  parent: directus_folders_filter
  _and: [directus_folders_filter]
  _or: [directus_folders_filter]
}

input directus_operations_filter {
  id: string_filter_operators
  name: string_filter_operators
  key: string_filter_operators
  type: string_filter_operators
  position_x: number_filter_operators
  position_y: number_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  resolve: directus_operations_filter
  reject: directus_operations_filter
  flow: directus_flows_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  _and: [directus_operations_filter]
  _or: [directus_operations_filter]
}

input directus_panels_filter {
  id: string_filter_operators
  dashboard: directus_dashboards_filter
  name: string_filter_operators
  icon: string_filter_operators
  color: string_filter_operators
  show_header: boolean_filter_operators
  note: string_filter_operators
  type: string_filter_operators
  position_x: number_filter_operators
  position_y: number_filter_operators
  width: number_filter_operators
  height: number_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  _and: [directus_panels_filter]
  _or: [directus_panels_filter]
}

input directus_permissions_filter {
  id: number_filter_operators
  collection: string_filter_operators
  action: string_filter_operators
  permissions: string_filter_operators
  permissions_func: count_function_filter_operators
  validation: string_filter_operators
  validation_func: count_function_filter_operators
  presets: string_filter_operators
  presets_func: count_function_filter_operators
  fields: string_filter_operators
  policy: directus_policies_filter
  _and: [directus_permissions_filter]
  _or: [directus_permissions_filter]
}

input directus_policies_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  description: string_filter_operators
  ip_access: string_filter_operators
  enforce_tfa: boolean_filter_operators
  admin_access: boolean_filter_operators
  app_access: boolean_filter_operators
  permissions: directus_permissions_filter
  permissions_func: count_function_filter_operators
  users: directus_access_filter
  users_func: count_function_filter_operators
  roles: directus_access_filter
  roles_func: count_function_filter_operators
  _and: [directus_policies_filter]
  _or: [directus_policies_filter]
}

input directus_revisions_filter {
  id: number_filter_operators
  activity: directus_activity_filter
  collection: string_filter_operators
  item: string_filter_operators
  data: string_filter_operators
  data_func: count_function_filter_operators
  delta: string_filter_operators
  delta_func: count_function_filter_operators
  parent: directus_revisions_filter
  version: directus_versions_filter
  _and: [directus_revisions_filter]
  _or: [directus_revisions_filter]
}

input directus_roles_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  description: string_filter_operators
  parent: directus_roles_filter
  children: directus_roles_filter
  children_func: count_function_filter_operators
  policies: directus_access_filter
  policies_func: count_function_filter_operators
  users: directus_users_filter
  users_func: count_function_filter_operators
  _and: [directus_roles_filter]
  _or: [directus_roles_filter]
}

input directus_sync_id_map_filter {
  id: number_filter_operators
  table: string_filter_operators
  sync_id: string_filter_operators
  local_id: string_filter_operators
  created_at: date_filter_operators
  created_at_func: datetime_function_filter_operators
  _and: [directus_sync_id_map_filter]
  _or: [directus_sync_id_map_filter]
}

input directus_users_filter {
  id: string_filter_operators
  first_name: string_filter_operators
  last_name: string_filter_operators
  email: string_filter_operators
  password: hash_filter_operators
  location: string_filter_operators
  title: string_filter_operators
  description: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  avatar: directus_files_filter
  language: string_filter_operators
  tfa_secret: hash_filter_operators
  status: string_filter_operators
  role: directus_roles_filter
  token: hash_filter_operators
  last_access: date_filter_operators
  last_access_func: datetime_function_filter_operators
  last_page: string_filter_operators
  provider: string_filter_operators
  external_identifier: string_filter_operators
  auth_data: string_filter_operators
  auth_data_func: count_function_filter_operators
  email_notifications: boolean_filter_operators
  appearance: string_filter_operators
  theme_dark: string_filter_operators
  theme_light: string_filter_operators
  theme_light_overrides: string_filter_operators
  theme_light_overrides_func: count_function_filter_operators
  theme_dark_overrides: string_filter_operators
  theme_dark_overrides_func: count_function_filter_operators
  policies: directus_access_filter
  policies_func: count_function_filter_operators
  _and: [directus_users_filter]
  _or: [directus_users_filter]
}

input directus_versions_filter {
  id: string_filter_operators
  key: string_filter_operators
  name: string_filter_operators
  collection: string_filter_operators
  item: string_filter_operators
  hash: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
  delta: string_filter_operators
  delta_func: count_function_filter_operators
  _and: [directus_versions_filter]
  _or: [directus_versions_filter]
}

input gesangbuchlied_files_filter {
  id: number_filter_operators
  gesangbuchlied_id: gesangbuchlied_filter
  directus_files_id: directus_files_filter
  _and: [gesangbuchlied_files_filter]
  _or: [gesangbuchlied_files_filter]
}

input gesangbuchlied_filter {
  id: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  rueckfrageAutor: string_filter_operators
  bewertungKleinerKreis: bewertungKleinerKreis_filter
  bewertungAnmerkung: string_filter_operators
  liedHatAenderung: boolean_filter_operators
  titel: string_filter_operators
  textId: text_filter
  melodieId: melodie_filter
  liednummer2000: number_filter_operators
  melodieGeaendert: boolean_filter_operators
  textGeaendert: boolean_filter_operators
  anmerkung: string_filter_operators
  linkCloud: string_filter_operators
  externerLink: string_filter_operators
  einreicherName: string_filter_operators
  gesangbuchlied_satz_mit_melodie_und_text: gesangbuchlied_files_filter
  gesangbuchlied_satz_mit_melodie_und_text_func: count_function_filter_operators
  kategorieId: gesangbuchlied_kategorie_filter
  kategorieId_func: count_function_filter_operators
  _and: [gesangbuchlied_filter]
  _or: [gesangbuchlied_filter]
}

input gesangbuchlied_kategorie_filter {
  id: number_filter_operators
  gesangbuchlied_id: gesangbuchlied_filter
  kategorie_id: kategorie_filter
  _and: [gesangbuchlied_kategorie_filter]
  _or: [gesangbuchlied_kategorie_filter]
}

input hash_filter_operators {
  _null: Boolean
  _nnull: Boolean
  _empty: Boolean
  _nempty: Boolean
}

input kategorie_filter {
  id: number_filter_operators
  name: string_filter_operators
  typ: string_filter_operators
  _and: [kategorie_filter]
  _or: [kategorie_filter]
}

input lizenz_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  digital: boolean_filter_operators
  print: boolean_filter_operators
  _and: [lizenz_filter]
  _or: [lizenz_filter]
}

input melodie_autor_filter {
  id: number_filter_operators
  melodie_id: melodie_filter
  autor_id: autor_filter
  _and: [melodie_autor_filter]
  _or: [melodie_autor_filter]
}

input melodie_files_filter {
  id: number_filter_operators
  melodie_id: melodie_filter
  directus_files_id: directus_files_filter
  _and: [melodie_files_filter]
  _or: [melodie_files_filter]
}

input melodie_filter {
  id: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  rueckfrageAutor: string_filter_operators
  bewertungKleinerKreis: bewertungKleinerKreis_filter
  bewertungAnmerkung: string_filter_operators
  titel: string_filter_operators
  quelle: string_filter_operators
  quelllink: string_filter_operators
  lizenzId: lizenz_filter
  anmerkung: string_filter_operators
  abc_melodie: string_filter_operators
  abc_melodie_func: count_function_filter_operators
  autorId: melodie_autor_filter
  autorId_func: count_function_filter_operators
  noten: melodie_files_filter
  noten_func: count_function_filter_operators
  _and: [melodie_filter]
  _or: [melodie_filter]
}

input number_filter_operators {
  _eq: GraphQLStringOrFloat
  _neq: GraphQLStringOrFloat
  _in: [GraphQLStringOrFloat]
  _nin: [GraphQLStringOrFloat]
  _gt: GraphQLStringOrFloat
  _gte: GraphQLStringOrFloat
  _lt: GraphQLStringOrFloat
  _lte: GraphQLStringOrFloat
  _null: Boolean
  _nnull: Boolean
  _between: [GraphQLStringOrFloat]
  _nbetween: [GraphQLStringOrFloat]
}

input string_filter_operators {
  _eq: String
  _neq: String
  _contains: String
  _icontains: String
  _ncontains: String
  _starts_with: String
  _nstarts_with: String
  _istarts_with: String
  _nistarts_with: String
  _ends_with: String
  _nends_with: String
  _iends_with: String
  _niends_with: String
  _in: [String]
  _nin: [String]
  _null: Boolean
  _nnull: Boolean
  _empty: Boolean
  _nempty: Boolean
}

input termin_filter {
  id: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  title: string_filter_operators
  start: date_filter_operators
  start_func: datetime_function_filter_operators
  ende: date_filter_operators
  ende_func: datetime_function_filter_operators
  bemerkung: string_filter_operators
  arbeitskreisId: arbeitskreis_filter
  istMeilenstein: boolean_filter_operators
  sort: number_filter_operators
  _and: [termin_filter]
  _or: [termin_filter]
}

input text_autor_filter {
  id: number_filter_operators
  text_id: text_filter
  autor_id: autor_filter
  _and: [text_autor_filter]
  _or: [text_autor_filter]
}

input text_filter {
  id: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  rueckfrageAutor: string_filter_operators
  titel: string_filter_operators
  bewertungKleinerKreis: bewertungKleinerKreis_filter
  bewertungAnmerkung: string_filter_operators
  strophenEinzeln: string_filter_operators
  strophenEinzeln_func: count_function_filter_operators
  quelle: string_filter_operators
  quelllink: string_filter_operators
  lizenzId: lizenz_filter
  anmerkung: string_filter_operators
  autorId: text_autor_filter
  autorId_func: count_function_filter_operators
  _and: [text_filter]
  _or: [text_filter]
}

input update_arbeitskreis_input {
  id: ID
  name: String
  email: String
  ansprechpartner: String
  icon: String
}

input update_auftrag_input {
  id: ID
  status: String
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  arbeitskreisId: update_arbeitskreis_input
  textId: update_text_input
  auftragsartText: String
  auftraggeberId: update_arbeitskreis_input
}

input update_autor_input {
  id: ID
  status: String
  vorname: String
  nachname: String
  geburtsjahr: Int
  sterbejahr: Int
}

input update_bewertungKleinerKreis_input {
  id: ID
  bezeichner: String
  rangfolge: Int
}

input update_directus_access_input {
  id: ID
  role: update_directus_roles_input
  user: update_directus_users_input
  policy: update_directus_policies_input
  sort: Int
}

input update_directus_files_input {
  id: ID
  storage: String
  filename_disk: String
  filename_download: String
  title: String
  type: String
  folder: update_directus_folders_input
  uploaded_by: update_directus_users_input
  created_on: Date
  modified_by: update_directus_users_input
  modified_on: Date
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  metadata: JSON
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  uploaded_on: Date
}

input update_directus_folders_input {
  id: ID
  name: String
  parent: update_directus_folders_input
}

input update_directus_permissions_input {
  id: ID
  collection: String
  action: String
  permissions: JSON
  validation: JSON
  presets: JSON
  fields: [String]
  policy: update_directus_policies_input
}

input update_directus_policies_input {
  id: ID
  name: String
  icon: String
  description: String
  ip_access: [String]

  """$t:field_options.directus_policies.enforce_tfa"""
  enforce_tfa: Boolean
  admin_access: Boolean
  app_access: Boolean
  permissions: [update_directus_permissions_input]
  users: [update_directus_access_input]
  roles: [update_directus_access_input]
}

input update_directus_roles_input {
  id: ID
  name: String
  icon: String
  description: String
  parent: update_directus_roles_input
  children: [update_directus_roles_input]
  policies: [update_directus_access_input]
  users: [update_directus_users_input]
}

input update_directus_sync_id_map_input {
  id: ID
  table: String
  sync_id: String
  local_id: String
  created_at: Date
}

input update_directus_users_input {
  id: ID
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  avatar: update_directus_files_input
  language: String
  tfa_secret: Hash
  status: String
  role: update_directus_roles_input
  token: Hash
  last_access: Date
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_dark_overrides: JSON
  policies: [update_directus_access_input]
}

input update_gesangbuchlied_files_input {
  id: ID
  gesangbuchlied_id: update_gesangbuchlied_input
  directus_files_id: update_directus_files_input
}

input update_gesangbuchlied_input {
  id: ID
  status: String
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  rueckfrageAutor: String
  bewertungKleinerKreis: update_bewertungKleinerKreis_input
  bewertungAnmerkung: String

  """
  Der Wert wird automatisch gesetzt, wenn eine Änderung über die Gesangbuch-Webseite im Lied (Text o. Melodie) vorgenommen wurde. Ist nach Bewertung/Sichtung wieder manuell zurück zu setzen.
  """
  liedHatAenderung: Boolean
  titel: String
  textId: update_text_input
  melodieId: update_melodie_input
  liednummer2000: Int
  melodieGeaendert: Boolean
  textGeaendert: Boolean
  anmerkung: String
  linkCloud: String
  externerLink: String
  einreicherName: String
  gesangbuchlied_satz_mit_melodie_und_text: [update_gesangbuchlied_files_input]
  kategorieId: [update_gesangbuchlied_kategorie_input]
}

input update_gesangbuchlied_kategorie_input {
  id: ID
  gesangbuchlied_id: update_gesangbuchlied_input
  kategorie_id: update_kategorie_input
}

input update_kategorie_input {
  id: ID
  name: String
  typ: String
}

input update_lizenz_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  name: String
  digital: Boolean
  print: Boolean
}

input update_melodie_autor_input {
  id: ID
  melodie_id: update_melodie_input
  autor_id: update_autor_input
}

input update_melodie_files_input {
  id: ID
  melodie_id: update_melodie_input
  directus_files_id: update_directus_files_input
}

input update_melodie_input {
  id: ID
  status: String
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  rueckfrageAutor: String
  bewertungKleinerKreis: update_bewertungKleinerKreis_input
  bewertungAnmerkung: String
  titel: String
  quelle: String
  quelllink: String
  lizenzId: update_lizenz_input
  anmerkung: String
  abc_melodie: JSON
  autorId: [update_melodie_autor_input]
  noten: [update_melodie_files_input]
}

input update_termin_input {
  id: ID
  status: String
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  title: String
  start: Date
  ende: Date
  bemerkung: String
  arbeitskreisId: update_arbeitskreis_input
  istMeilenstein: Boolean
  sort: Int
}

input update_text_autor_input {
  id: ID
  text_id: update_text_input
  autor_id: update_autor_input
}

input update_text_input {
  id: ID
  status: String
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  rueckfrageAutor: String
  titel: String
  bewertungKleinerKreis: update_bewertungKleinerKreis_input
  bewertungAnmerkung: String
  strophenEinzeln: JSON
  quelle: String
  quelllink: String
  lizenzId: update_lizenz_input
  anmerkung: String
  autorId: [update_text_autor_input]
}